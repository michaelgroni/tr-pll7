#pragma once

#include "pico/stdlib.h"

#include <array>

class Si5351
{
public:
    static Si5351 *getInstance();
    void write(const uint32_t frequency);

private:
    uint32_t pllFreq = 0;

    Si5351();
    Si5351(const Si5351 &);            // disable copy constructor
    Si5351 &operator=(const Si5351 &); // disable operator =

    uint32_t pllFrequency(uint32_t frequency);

    void calculateDivider(const double value, uint32_t &integerPart, uint32_t &numerator, uint32_t &denominator);
    void setMultisynthDivider(uint8_t channel, uint32_t integerPart, uint32_t numerator, uint32_t denominator);
    void setPLL(uint8_t pll, uint32_t mult, uint32_t num, uint32_t denom);
    void setMaxOutputPower(uint8_t channel);

    const std::array<uint8_t, 35> registerMap1 = {
        16,                                             //  first register to write
        0x0E,                                           //  16 CLK0
        0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,       //  17 -  23 other CLKs powered down
        0x00, 0x00,                                     //  24 -  25 all CLKs LOW when disabled
        0x02, 0x71, 0x00, 0x0C, 0x9C, 0x00, 0x01, 0x24, //  26 -  33 generated by ClockBuilder
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //  34 -  41 generated by ClockBuilder
        0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, //  42 -  49 MS0
    };

    const std::array<uint8_t, 6> registerMap2 = {
        183,                                             // first register to write
        0xD2, 0x60, 0x60, 0x00, 0xC0                     // 183 - 187 generated by Clock Builder
    };    

};
